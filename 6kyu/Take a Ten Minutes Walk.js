/**
 * Вы живёте в городе Картезия, где все дороги расположены в идеальной сетке.
 *
 * Вы приехали на встречу на десять минут раньше и решили воспользоваться этим временем для короткой прогулки.
 * Город предоставляет своим жителям приложение для генерации прогулок на их телефонах — каждый раз, когда вы нажимаете кнопку,
 * оно присылает вам массив строк из одной буквы, представляющих направления для прогулки (например, ['n', 's', 'w', 'e']).
 *
 * Вы всегда проходите ровно один квартал для каждой буквы (направления), и вы знаете,
 * что прохождение одного городского квартала занимает у вас одну минуту.
 * Создайте функцию, которая вернёт `true`, если прогулка, заданная приложением,
 * займёт у вас ровно десять минут (вы не хотите прийти раньше или позже!) и, конечно же, вернёт вас в исходную точку.
 * В противном случае верните `false`.
 *
 * Примечание: вы всегда будете получать валидный массив,
 * содержащий случайный набор букв-направлений (только 'n', 's', 'e' или 'w').
 * Пустой массив вам никогда не дадут (это не прогулка, это стояние на месте!).
 */
function isValidWalk(walk) {
    if(walk.length !== 10) {
        return false
    }
    x = (walk.filter((el) => el === 'e').length - walk.filter((el) => el === 'w').length)
    y = (walk.filter((el) => el === 'n').length - walk.filter((el) => el === 's').length)
    return (x === 0 && y === 0)
}

isValidWalk(['n','s','n','s','n','s','n','s','n','s'])
isValidWalk(['w','e','w','e','w','e','w','e','w','e','w','e'])
isValidWalk(['w'])
isValidWalk(['n','n','n','s','n','s','n','s','n','s'])
